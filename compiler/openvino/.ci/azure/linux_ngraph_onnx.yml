trigger:
  branches:
    include:
    - 'master'
    - 'releases/*'
  paths:
    exclude:
    - '*/docs/*'
    - 'docs/*'
    - '*/*.md'
    - '*.md'
    - '*/layer_tests_summary/*'
    - '*/conformance/*'
    - 'tools/*'
    - 'tests/layer_tests/*'

pr:
  drafts: 'false'
  branches:
    include:
    - 'master'
    - releases/*
  paths:
    exclude:
    - '*/docs/*'
    - 'docs/*'
    - '*/*.md'
    - '*.md'
    - '*/layer_tests_summary/*'
    - '*/conformance/*'
    - 'tools/*'
    - 'tests/layer_tests/*'

jobs:
- job: OpenVINO_ONNX_CI
  strategy:
    matrix:
      Release:
        BUILD_TYPE: 'Release'
        TOX_COMMAND: 'tox && tox -e zoo_models'
      Debug:
        BUILD_TYPE: 'Debug'
        TOX_COMMAND: 'tox'
    maxParallel: '2'

  # About 300% of total time
  timeoutInMinutes: '90'

  pool:
    name: LIN_VMSS_VENV_ONNX_U20_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    REPO_DIR: $(Build.Repository.LocalPath)
    WORK_DIR: $(Pipeline.Workspace)/_w
    MODELS_DIR: /mount/cinfsshare/onnxtestdata
    TMP_DIR: /mnt/tmp
    ONNX_MODEL_ZOO_SHA: "d58213534f2a4d1c4b19ba62b3bb5f544353256e"


  steps:
  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
    displayName: 'System info'

  - script: |
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      sudo mkdir -p $(MODELS_DIR)
      sudo apt --assume-yes update && sudo apt --assume-yes install nfs-common
      sudo apt install nfs-common -y
      sudo mount -vvv -t nfs cinfsshare.file.core.windows.net:/cinfsshare/onnxtestdata $(MODELS_DIR) -o vers=4,minorversion=1,sec=sys
      mkdir -p $(MODELS_DIR)/models_data
    displayName: 'Make dirs'

  - checkout: self
    clean: 'true'
    submodules: 'true'
    path: openvino

  - script: |
      set -e
      apt-get update && apt-get install -y lsb-release && apt-get clean all
      curl -fsSL https://get.docker.com -o get-docker.sh
      sudo sh get-docker.sh
    displayName: 'Install dependencies'

  - script:
      src/bindings/python/tests/test_onnx/model_zoo_preprocess.sh -d $(MODELS_DIR)/models_data -o -s "$(ONNX_MODEL_ZOO_SHA)"
    displayName: 'Update models'
    condition: ne(variables['BUILD_TYPE'], 'Debug')

  - script: |
      sudo docker build \
        --tag=openvino-onnx-ci-image \
        --file=.ci/openvino-onnx/Dockerfile \
        --build-arg BUILD_TYPE=$(BUILD_TYPE) .
    displayName: 'Docker build $(BUILD_TYPE)'

  - script: sudo fallocate -l 64G /swapfile ; sudo mkswap /swapfile ; sudo swapon /swapfile ; df ; free -h
    displayName: 'Create swap'

  - script: |
      sudo docker run \
        --name openvino-onnx-ci-container \
        --volume $(MODELS_DIR)/models_data/model_zoo/onnx_model_zoo_$(ONNX_MODEL_ZOO_SHA):/root/.onnx/model_zoo/onnx_model_zoo \
        --volume $(MODELS_DIR)/msft:/root/.onnx/model_zoo/MSFT openvino-onnx-ci-image \
        /bin/bash -c "$(TOX_COMMAND)"
    displayName: 'Docker run $(BUILD_TYPE)'
