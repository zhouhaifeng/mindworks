trigger:
  branches:
    include:
    - 'master'
    - 'releases/*'
  paths:
    exclude:
    - '*/docs/*'
    - 'docs/*'
    - '*/*.md'
    - '*.md'
    - '*/layer_tests_summary/*'
    - '*/conformance/*'
    - 'tools/*'

pr:
  drafts: 'false'
  branches:
    include:
    - 'master'
    - 'releases/*'
  paths:
    exclude:
    - '*/docs/*'
    - 'docs/*'
    - '*/*.md'
    - '*.md'
    - '*/layer_tests_summary/*'
    - '*/conformance/*'
    - 'tools/*'

resources:
  repositories:
  - repository: testdata
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/testdata

variables:
  - group: github

jobs:
- job: WinCC
  # About 150% of total time
  timeoutInMinutes: '120'

  pool:
    name: WIN_VMSS_VENV_F8S_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    REPO_DIR: $(Build.Repository.LocalPath)
    MODELS_PATH: $(REPO_DIR)\..\testdata
    WORK_DIR: $(Pipeline.Workspace)\_w
    BUILD_DIR: $(WORK_DIR)\build
    BUILD_DIR_2: $(WORK_DIR)\build_s
    MSVS_VARS_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
    MSVC_COMPILER_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\bin\Hostx64\x64\cl.exe
    INSTALL_DIR: $(WORK_DIR)\install_pkg
    SETUPVARS: $(INSTALL_DIR)\setupvars.bat

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11.2'
      addToPath: true
      architecture: 'x64'
      githubToken: $(auth_token)
    displayName: Setup Python 3.11
    name: setupPython

  - script: |
      powershell -command "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri http://169.254.169.254/metadata/instance/compute?api-version=2019-06-01 | format-custom"
      where python
      python --version
      where java
      java -version
      where cmake
      cmake --version
      wmic computersystem get TotalPhysicalMemory
      wmic cpu list
      wmic logicaldisk get description,name
      wmic VOLUME list
      set
    displayName: 'System info'

  - script: |
      rd /Q /S $(WORK_DIR) & mkdir $(WORK_DIR)
      rd /Q /S $(BUILD_DIR) & mkdir $(BUILD_DIR)
      rd /Q /S $(BUILD_DIR_2) & mkdir $(BUILD_DIR_2)
    displayName: 'Make dir'

  - checkout: self
    clean: 'true'
    submodules: 'true'
    path: openvino

  - script: |
      rem Speed up build
      powershell -command "Invoke-WebRequest https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip -OutFile ninja-win.zip"
      powershell -command "Expand-Archive -Force ninja-win.zip"
    workingDirectory: $(WORK_DIR)
    displayName: 'Install dependencies'

  - checkout: testdata
    clean: 'true'
    lfs: 'true'
    path: testdata

  - script: |
      set PATH=$(WORK_DIR)\ninja-win;%PATH%
      call "$(MSVS_VARS_PATH)" && cmake ^
        -G Ninja ^
        -DENABLE_CPPLINT=OFF ^
        -DENABLE_GAPI_PREPROCESSING=OFF ^
        -DENABLE_PLUGINS_XML=ON ^
        -DCMAKE_COMPILE_WARNING_AS_ERROR=ON ^
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) ^
        -DENABLE_PROFILING_ITT=ON ^
        -DSELECTIVE_BUILD=COLLECT ^
        -DCMAKE_C_COMPILER:PATH="$(MSVC_COMPILER_PATH)" ^
        -DCMAKE_CXX_COMPILER:PATH="$(MSVC_COMPILER_PATH)" ^
        -S $(REPO_DIR) ^
        -B $(BUILD_DIR)
    displayName: 'CMake CC COLLECT'

  - script: dir $(REPO_DIR)\temp\ /s
    displayName: 'List temp SDKs'

  - script: |
      call "$(MSVS_VARS_PATH)" && cmake --build $(BUILD_DIR) --config $(BUILD_TYPE) --parallel --target ^
        openvino_intel_cpu_plugin openvino_ir_frontend benchmark_app sea_itt_lib
    displayName: 'Build CC COLLECT'

  - script: dir $(REPO_DIR)\bin\ /s
    displayName: 'List bin files'

  - script: |
      set path=%path%;$(REPO_DIR)\temp\tbb\bin
      call "$(MSVS_VARS_PATH)" && python thirdparty\itt_collector\runtool\sea_runtool.py --bindir $(REPO_DIR)\bin\intel64\$(BUILD_TYPE) -o $(BUILD_DIR)\itt_stat ! $(REPO_DIR)\bin\intel64\$(BUILD_TYPE)\benchmark_app.exe -niter 1 -nireq 1 -m $(MODELS_PATH)\models\test_model\test_model_fp32.xml -d CPU
    workingDirectory: $(REPO_DIR)
    displayName: 'Code usage analysis'

  - script: dir $(BUILD_DIR)\*.csv /s /p
    displayName: 'List csv files'

  - script: |
      call "$(MSVS_VARS_PATH)" && cmake ^
        -G "Visual Studio 16 2019" ^
        -DVERBOSE_BUILD=ON ^
        -DENABLE_CPPLINT=OFF ^
        -DENABLE_GAPI_PREPROCESSING=OFF ^
        -DENABLE_PROFILING_ITT=OFF ^
        -DSELECTIVE_BUILD=ON ^
        -DCMAKE_COMPILE_WARNING_AS_ERROR=ON ^
        -DSELECTIVE_BUILD_STAT=$(BUILD_DIR)\*.csv ^
        -DCMAKE_C_COMPILER:PATH="$(MSVC_COMPILER_PATH)" ^
        -DCMAKE_CXX_COMPILER:PATH="$(MSVC_COMPILER_PATH)" ^
        -S $(REPO_DIR) ^
        -B $(BUILD_DIR_2)
    displayName: 'CMake CC ON'

  - script: cmake --build $(BUILD_DIR_2) --config $(BUILD_TYPE) --parallel --target ^
      openvino_intel_cpu_plugin openvino_ir_frontend benchmark_app
    displayName: 'Build CC ON'

  - script: dir $(REPO_DIR)\bin\ /s
    displayName: 'List bin files ON'

  - script: type $(BUILD_DIR_2)\src\common\conditional_compilation\conditional_compilation_gen.h
    displayName: 'Check conditional_compilation_gen.h header'

  - script: |
      set path=%path%;$(REPO_DIR)\temp\tbb\bin
      $(REPO_DIR)\bin\intel64\$(BUILD_TYPE)\benchmark_app.exe -niter 1 -nireq 1 -m $(MODELS_PATH)\models\test_model\test_model_fp32.xml -d CPU
    workingDirectory: $(REPO_DIR)
    displayName: 'Use OpenVINO after CC'
