trigger:
  branches:
    include:
    - 'master'
    - 'releases/*'
  paths:
    exclude:
    - '*/docs/*'
    - 'docs/*'
    - '*/*.md'
    - '*.md'
    - '*/layer_tests_summary/*'
    - '*/conformance/*'

pr:
  branches:
    include:
    - 'master'
    - 'releases/*'
  paths:
    exclude:
    - '*/docs/*'
    - 'docs/*'
    - '*/*.md'
    - '*.md'
    - '*/layer_tests_summary/*'
    - '*/conformance/*'

resources:
  repositories:
  - repository: openvino_contrib
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/openvino_contrib
    ref: master

  - repository: testdata
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/testdata
    ref: master

variables:
  - group: github

jobs:
- job: Lin
  strategy:
    matrix:
      # Dynamic:
      #   CMAKE_BUILD_SHARED_LIBS: 'ON'
      #   PYTHON_STATIC_ARGS:
      #   CMAKE_CPACK_GENERATOR:
      #   SAMPLES_INSTALL_DIR: $(INSTALL_DIR)/samples
      #   PYTHON_SAMPLES_INSTALL_DIR: $(SAMPLES_INSTALL_DIR)/python
      #   RUN_PREFIX: . $(SETUPVARS) -pyver 3.8 &&
      # Debian:
      #   CMAKE_BUILD_SHARED_LIBS: 'ON'
      #   PYTHON_STATIC_ARGS:
      #   CMAKE_CPACK_GENERATOR: 'DEB'
      #   SAMPLES_INSTALL_DIR: /usr/share/openvino/samples
      #   PYTHON_SAMPLES_INSTALL_DIR: $(INSTALL_DIR)/share/openvino/samples/python
      #   RUN_PREFIX: LD_LIBRARY_PATH=$(INSTALL_TEST_DIR):$(INSTALL_DIR)/opencv/lib:$LD_LIBRARY_PATH
      Static:
        CMAKE_BUILD_SHARED_LIBS: 'OFF'
        PYTHON_STATIC_ARGS: -m "not dynamic_library and not template_plugin"
        CMAKE_CPACK_GENERATOR:
        SAMPLES_INSTALL_DIR: $(INSTALL_DIR)/samples
        PYTHON_SAMPLES_INSTALL_DIR: $(SAMPLES_INSTALL_DIR)/python
        RUN_PREFIX: . $(SETUPVARS) &&
    maxParallel: '2'

  # About 150% of total time
  timeoutInMinutes: '180'

  pool:
    name: LIN_VMSS_VENV_F16S_U20_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    REPO_DIR: $(Build.Repository.LocalPath)
    OPENVINO_CONTRIB_REPO_DIR: $(REPO_DIR)/../openvino_contrib
    MODELS_PATH: $(REPO_DIR)/../testdata
    WORK_DIR: $(Pipeline.Workspace)/_w
    BUILD_DIR: $(WORK_DIR)/build
    BUILD_SAMPLES_DIR: $(WORK_DIR)/build_samples
    BUILD_LAYER_TESTS_DIR: $(WORK_DIR)/build_layer_tests
    BUILD_SAMPLES_TESTS_DIR: $(WORK_DIR)/build_samples_tests
    INSTALL_DIR: $(WORK_DIR)/install_pkg
    INSTALL_TEST_DIR: $(INSTALL_DIR)/tests
    LAYER_TESTS_DIR: $(INSTALL_TEST_DIR)/layer_tests
    SETUPVARS: $(INSTALL_DIR)/setupvars.sh
    TMP_DIR: /mnt/tmp
    SHARE_DIR: /mount/cinfsshare/onnxtestdata
    CCACHE_DIR: $(SHARE_DIR)/ccache/master/linux
    CMAKE_VERSION: 3.24.0
    BUILD_PYTHON: $(WORK_DIR)/build_python
    INSTALL_PYTHON: $(INSTALL_OPENVINO)/extras/python
    LD_LIBRARY_PATH: $(Agent.ToolsDirectory)/Python/$(OV_PYTHON_VERSION)/x64/lib
    OV_PYTHON_VERSION: 3.11.2 # Full version of Python its required for LD_LIBRARY_PATH. More details https://github.com/microsoft/azure-pipelines-tool-lib/blob/master/docs/overview.md#tool-cache

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(OV_PYTHON_VERSION)' # Setting only major & minor version will download latest release from GH repo example 3.10 will be 3.10.10.
      addToPath: true
      disableDownloadFromRegistry: false
      architecture: 'x64'
      githubToken: $(auth_token)
    displayName: Setup Python 3.11
    name: setupPython
  - bash: |
      #!/bin/bash
      python -V

  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
      echo TargetBranch: $(System.PullRequest.TargetBranch)
      echo SourceBranch: $(Build.SourceBranch)
    displayName: 'System info'

  - script: |
      set -e
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      rm -rf $(BUILD_DIR) ; mkdir $(BUILD_DIR)
      rm -rf $(BUILD_SAMPLES_DIR) ; mkdir $(BUILD_SAMPLES_DIR)
      sudo rm -rf $(TMP_DIR) ; sudo mkdir $(TMP_DIR) ; sudo chmod 777 -R $(TMP_DIR)
      sudo mkdir -p $(SHARE_DIR)
      sudo apt --assume-yes update && sudo apt --assume-yes install nfs-common
      sudo mount -vvv -t nfs cinfsshare.file.core.windows.net:/cinfsshare/onnxtestdata $(SHARE_DIR) -o vers=4,minorversion=1,sec=sys
      mkdir -p $(CCACHE_DIR)
    displayName: 'Make dir'

  - checkout: self
    clean: 'true'
    submodules: 'true'
    path: openvino

  - checkout: openvino_contrib
    clean: 'true'
    submodules: 'true'
    path: openvino_contrib

  - script: |
      set -e
      sudo -E $(REPO_DIR)/install_build_dependencies.sh
      # Move jdk into contrib
      # 'clang' compiler is used as a default compiler
      sudo apt --assume-yes install openjdk-11-jdk libbz2-dev clang
      # For Python API
      python3 -m pip install --upgrade pip
      python3 -m pip install -r $(REPO_DIR)/src/bindings/python/wheel/requirements-dev.txt
      python3 -m pip install -r $(REPO_DIR)/src/bindings/python/requirements.txt
      # For running Python API tests
      python3 -m pip install -r $(REPO_DIR)/src/bindings/python/src/compatibility/openvino/requirements-dev.txt
      # For running Paddle frontend unit tests
      # TODO Reenable PDPD after paddlepaddle==2.5.0 with compliant protobuf is released (ticket 95904)
      #python3 -m pip install -r $(REPO_DIR)/src/frontends/paddle/tests/requirements.txt
      # For running ONNX frontend unit tests
      python3 -m pip install -r $(REPO_DIR)/src/frontends/onnx/tests/requirements.txt
      # For running TensorFlow frontend unit tests
      python3 -m pip install -r $(REPO_DIR)/src/frontends/tensorflow/tests/requirements.txt
      # For MO unit tests
      python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements_mxnet.txt
      python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements_caffe.txt
      python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements_kaldi.txt
      python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements_onnx.txt
      python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements_tf2.txt
      python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements_dev.txt
      # Speed up build
      sudo apt -y --no-install-recommends install unzip
      wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
      unzip ninja-linux.zip
      sudo cp -v ninja /usr/local/bin/
    displayName: 'Install dependencies'

  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
      echo TargetBranch: $(System.PullRequest.TargetBranch)
      echo SourceBranch: $(Build.SourceBranch)
    displayName: 'System info'


    # Should be after 'Install dependencies' because Git lfs is not installed
  - checkout: testdata
    clean: 'true'
    lfs: 'true'
    path: testdata

  - task: CMake@1
    inputs:
      # CMake must get Python 3.x version by default
      cmakeArgs: >
        -GNinja
        -DCMAKE_VERBOSE_MAKEFILE=ON
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
        -DENABLE_PYTHON=ON
        -DBUILD_SHARED_LIBS=$(CMAKE_BUILD_SHARED_LIBS)
        -DENABLE_ONEDNN_FOR_GPU=$(CMAKE_BUILD_SHARED_LIBS)
        -DENABLE_TESTS=ON
        -DENABLE_OV_ONNX_FRONTEND=ON
        -DENABLE_FASTER_BUILD=ON
        -DENABLE_STRICT_DEPENDENCIES=OFF
        -DOPENVINO_EXTRA_MODULES=$(OPENVINO_CONTRIB_REPO_DIR)/modules
        -DCUSTOM_OPERATIONS="calculate_grid;complex_mul;fft;grid_sample;sparse_conv;sparse_conv_transpose"
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        -DCMAKE_C_COMPILER_LAUNCHER=ccache
        -DCMAKE_CXX_LINKER_LAUNCHER=ccache
        -DCMAKE_C_LINKER_LAUNCHER=ccache
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang
        -DENABLE_SYSTEM_SNAPPY=ON
        -DENABLE_SYSTEM_TBB=ON
        -DCPACK_GENERATOR=$(CMAKE_CPACK_GENERATOR)
        -DBUILD_nvidia_plugin=OFF
        -S $(REPO_DIR)
        -B $(BUILD_DIR)
    displayName: 'Cmake OpenVINO'

  - script: ls -alR $(REPO_DIR)/temp/
    displayName: 'List temp SDKs'

  - script: ccache --zero-stats --max-size=50G --show-config
    displayName: 'Clean ccache stats'

  - script: cmake --build $(BUILD_DIR) --parallel --config $(BUILD_TYPE)
    env:
      CCACHE_DIR: $(CCACHE_DIR)
      CCACHE_TEMPDIR: $(TMP_DIR)/ccache
      CCACHE_BASEDIR: $(Pipeline.Workspace)
      CCACHE_MAXSIZE: 50G
    displayName: 'Build Lin'

  - script: ccache --show-stats
    displayName: 'Show ccache stats'

  - script: ls -alR $(REPO_DIR)/bin/
    displayName: 'List bin files'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -S $(REPO_DIR)/tests/layer_tests
        -B $(BUILD_LAYER_TESTS_DIR)
    displayName: 'Cmake Layer Tests'

  - script: cmake --build $(BUILD_LAYER_TESTS_DIR) --parallel --config $(BUILD_TYPE)
    displayName: 'Build Layer Tests'

  - script: sudo apt-get remove libtbb2 -y
    displayName: 'Remove debian dependencies'
    condition: eq(variables['CMAKE_CPACK_GENERATOR'], 'DEB')

  - script: cmake -DCOMPONENT=python_wheels -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_DIR)/cmake_install.cmake
    displayName: 'Install wheel packages'

  - script: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_LAYER_TESTS_DIR)/cmake_install.cmake
    displayName: 'Install Layer Tests'

  - script: python3 -m pip install openvino-dev --find-links=$(INSTALL_DIR)/tools
    displayName: 'Install python wheels'

  - script: |
      set -e
      cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DCOMPONENT=tests -P $(BUILD_DIR)/cmake_install.cmake
    displayName: 'Install tests'

  - script: ls -alR $(INSTALL_DIR)
    displayName: 'List install test files'

  - script: |
      sudo apt-get install libtbb-dev libpugixml-dev -y
      cmake --build $(BUILD_DIR) --target package --parallel
    condition: eq(variables['CMAKE_CPACK_GENERATOR'], 'DEB')
    displayName: 'Build Debian packages'

  - script: |
      # install debian packages from previous release
      sudo apt-get install --no-install-recommends gnupg wget -y
      wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
      sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
      echo "deb https://apt.repos.intel.com/openvino/2022 focal main" | sudo tee /etc/apt/sources.list.d/intel-openvino-2022.list
      sudo apt-get update -o Dir::Etc::sourcelist=/etc/apt/sources.list.d/intel-openvino-2022.list
      sudo apt-get install openvino -y || exit 1
      # install our local one and make sure the conflicts are resolved
      sudo apt-get install --no-install-recommends dpkg-dev -y
      rm -r _CPack_Packages
      dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
      echo "deb [trusted=yes] file:$(BUILD_DIR) ./" | sudo tee /etc/apt/sources.list.d/openvino-local.list
      sudo apt-get update -o Dir::Etc::sourcelist=/etc/apt/sources.list.d/openvino-local.list
      sudo apt-get install openvino -y
    workingDirectory: $(BUILD_DIR)
    condition: eq(variables['CMAKE_CPACK_GENERATOR'], 'DEB')
    displayName: 'Install Debian packages'

  - script: cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_DIR)/cmake_install.cmake
    condition: ne(variables['CMAKE_CPACK_GENERATOR'], 'DEB')
    displayName: 'Install openvino'

  - script: ls -alR $(INSTALL_DIR)
    condition: ne(variables['CMAKE_CPACK_GENERATOR'], 'DEB')
    displayName: 'List install files'

  - script: $(SAMPLES_INSTALL_DIR)/cpp/build_samples.sh -i $(INSTALL_DIR) -b $(BUILD_DIR)/cpp_samples
    displayName: 'Build cpp samples - gcc'

  - script: $(SAMPLES_INSTALL_DIR)/cpp/build_samples.sh -b $(BUILD_DIR)/cpp_samples_clang
    env:
      CC: clang
      CXX: clang++
    displayName: 'Build cpp samples - clang'

  - script: $(SAMPLES_INSTALL_DIR)/c/build_samples.sh -i $(INSTALL_DIR) -b $(BUILD_DIR)/c_samples
    env:
      VERBOSE: 1
    displayName: 'Build c samples'

  - script: rm -fr $(BUILD_DIR)
    displayName: 'Clean build dir'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_core_unit_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-OVCoreUT.xml
    displayName: 'OV Core UT'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_inference_functional_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-InferenceFunc.xml
    displayName: 'Inference Func Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_inference_unit_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-InferenceUnit.xml
    displayName: 'Inference Unit Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_proxy_plugin_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-OVProxyTests.xml
    displayName: 'OV Proxy Plugin Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_conditional_compilation_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ConditionalCompilation.xml
    displayName: 'Conditional Compilation Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_ir_frontend_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-IRFrontend.xml
    displayName: 'IR Frontend Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ONNXFrontend.xml
    displayName: 'ONNX Frontend Tests'

  # TODO Reenable PDPD after paddlepaddle==2.5.0 with compliant protobuf is released (ticket 95904)
  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/paddle_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-Paddle.xml
    displayName: 'Paddle Frontend UT'
    enabled: 'false'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_tensorflow_frontend_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-Tensorflow.xml
    displayName: 'TensorFlow Frontend Unit Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_tensorflow_common_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-TensorflowCommon.xml
    displayName: 'TensorFlow Common Unit Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_tensorflow_lite_frontend_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-TensorflowLite.xml
    displayName: 'TensorFlow Lite Frontend Unit Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_lp_transformations_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-LpTransformations.xml
    displayName: 'Low Precision Transformations Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_transformations_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-Transformations.xml
    displayName: 'Transformations Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_legacy_transformations_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-LegacyTransformations.xml
    displayName: 'Legacy Transformations Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_util_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-CommonUtilTests.xml
    displayName: 'Common Utils Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/InferenceEngineUnitTests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-InferenceEngineUnitTests.xml
    displayName: 'IE UT old'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_cpu_unit_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_cpu_unit_tests.xml
    displayName: 'Intel CPU Unit Tests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_gna_unit_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_gna_unit_tests.xml
    displayName: 'GNA UT'
    enabled: 'false' # TODO: fix

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_auto_unit_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_auto_unit_tests.xml
    displayName: 'AUTO UT'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_auto_batch_unit_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_auto_batch_unit_tests.xml
    displayName: 'AutoBatch UT'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_template_func_tests --gtest_filter=*smoke* --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-templateFuncTests.xml
    displayName: 'TEMPLATE FuncTests'

  - script: |
      $(RUN_PREFIX) $(INSTALL_TEST_DIR)/InferenceEngineCAPITests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-InferenceEngineCAPITests.xml
    displayName: 'IE CAPITests'

  - script: |
      $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_capi_test --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_capi_test.xml
    displayName: 'OV CAPITests'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_auto_batch_func_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_auto_batch_func_tests.xml
    displayName: 'AutoBatch FuncTests'

    # Skip test_onnx/test_zoo_models and test_onnx/test_backend due to long execution time
  - script: |
      python3 -m pytest -s $(INSTALL_TEST_DIR)/pyngraph $(PYTHON_STATIC_ARGS) \
        --junitxml=$(INSTALL_TEST_DIR)/TEST-Pyngraph.xml \
        --ignore=$(INSTALL_TEST_DIR)/pyngraph/tests/test_onnx/test_zoo_models.py \
        --ignore=$(INSTALL_TEST_DIR)/pyngraph/tests/test_onnx/test_backend.py
    displayName: 'nGraph and IE Python Bindings Tests'

    # Skip test_onnx/test_zoo_models and test_onnx/test_backend due to long execution time
  - script: |
      python3 -m pytest -sv $(INSTALL_TEST_DIR)/pyopenvino $(PYTHON_STATIC_ARGS) \
        --junitxml=$(INSTALL_TEST_DIR)/TEST-Pyngraph.xml \
        --ignore=$(INSTALL_TEST_DIR)/pyopenvino/tests/test_utils/test_utils.py \
        --ignore=$(INSTALL_TEST_DIR)/pyopenvino/tests/test_onnx/test_zoo_models.py \
        --ignore=$(INSTALL_TEST_DIR)/pyopenvino/tests/test_onnx/test_backend.py
    displayName: 'Python API 2.0 Tests'

  - script: |
      python3 -m pytest -s $(INSTALL_TEST_DIR)/mo/unit_tests --junitxml=$(INSTALL_TEST_DIR)/TEST-ModelOptimizer.xml
    displayName: 'Model Optimizer UT'

  - script: |
      python3 -m pytest -s $(REPO_DIR)/tools/ovc/unit_tests --junitxml=$(INSTALL_TEST_DIR)/TEST-OpenVinoConversion.xml
    displayName: 'OpenVino Conversion UT'

  - script: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_cpu_func_tests --gtest_filter=*smoke* --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_cpu_func_tests.xml
    displayName: 'CPU FuncTests'
    condition: and(succeeded(), eq(variables['CMAKE_BUILD_SHARED_LIBS'], 'OFF'))

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -S $(REPO_DIR)/tests/samples_tests
        -B $(BUILD_SAMPLES_TESTS_DIR)
    displayName: 'CMake Samples Tests'

  - script: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_SAMPLES_TESTS_DIR)/cmake_install.cmake
    displayName: 'Install Samples Tests'

  - script: python3 -m pip install -r $(INSTALL_TEST_DIR)/smoke_tests/requirements.txt
    displayName: 'Install dependencies for samples smoke tests'

  - script: |
      export PATH=$HOME/.local/bin:$PATH
      export LD_LIBRARY_PATH=$IE_APP_PATH:$LD_LIBRARY_PATH
      $(RUN_PREFIX) python3 -m pytest $(INSTALL_TEST_DIR)/smoke_tests/ \
        --env_conf $(INSTALL_TEST_DIR)/smoke_tests/env_config.yml \
        -s --junitxml=$(INSTALL_TEST_DIR)/TEST-SamplesSmokeTests.xml
    env:
      IE_APP_PATH: $(INSTALL_DIR)/samples_bin
      IE_APP_PYTHON_PATH: $(PYTHON_SAMPLES_INSTALL_DIR)/
      SHARE: $(INSTALL_TEST_DIR)/smoke_tests/samples_smoke_tests_data/
      WORKSPACE: $(INSTALL_DIR)
    displayName: 'Samples Smoke Tests'

  - script: |
      python3 -m pip install -r $(LAYER_TESTS_DIR)/requirements.txt
      export PYTHONPATH=$(REPO_DIR)/tools/mo/:$(LAYER_TESTS_DIR):$PYTHONPATH
      export TEST_DEVICE=CPU
      $(RUN_PREFIX) python3 -m pytest $(LAYER_TESTS_DIR)/pytorch_tests/ -m precommit --junitxml=$(INSTALL_TEST_DIR)/TEST-pytorch.xmlTEST
    displayName: 'PyTorch Layer Tests'

  - script: |
      python3 -m pip install -r $(LAYER_TESTS_DIR)/requirements.txt
      export PYTHONPATH=$(REPO_DIR)/tools/mo/:$(LAYER_TESTS_DIR):$PYTHONPATH
      export TEST_DEVICE=CPU
      $(RUN_PREFIX) python3 -m pytest $(LAYER_TESTS_DIR)/tensorflow_tests/ --use_new_frontend -m precommit_tf_fe --junitxml=$(INSTALL_TEST_DIR)/TEST-tf_fe.xmlTEST
    displayName: 'TensorFlow 1 Layer Tests - TF FE'

  - script: |
      python3 -m pip install -r $(LAYER_TESTS_DIR)/requirements.txt
      export PYTHONPATH=$(REPO_DIR)/tools/mo/:$(LAYER_TESTS_DIR):$PYTHONPATH
      export TEST_DEVICE=CPU
      $(RUN_PREFIX) python3 -m pytest $(LAYER_TESTS_DIR)/tensorflow2_keras_tests/ --use_new_frontend -m precommit_tf_fe --junitxml=$(INSTALL_TEST_DIR)/TEST-tf2_fe.xmlTEST
    displayName: 'TensorFlow 2 Layer Tests - TF FE'

  - script: |
      python3 -m pip install -r $(LAYER_TESTS_DIR)/requirements.txt
      export PYTHONPATH=$(LAYER_TESTS_DIR):$PYTHONPATH
      $(RUN_PREFIX) python3 -m pytest $(LAYER_TESTS_DIR)/tensorflow_tests/test_tf_Roll.py --ir_version=10 --junitxml=$(INSTALL_TEST_DIR)/TEST-tf_Roll.xmlTEST
    displayName: 'TensorFlow 1 Layer Tests - Legacy FE'

  - script: |
      python3 -m pip install -r $(LAYER_TESTS_DIR)/requirements.txt
      export PYTHONPATH=$(LAYER_TESTS_DIR):$PYTHONPATH
      export TEST_DEVICE=CPU
      $(RUN_PREFIX) python3 -m pytest $(LAYER_TESTS_DIR)/tensorflow2_keras_tests/test_tf2_keras_activation.py --ir_version=11 --junitxml=./TEST-tf2_Activation.xmlTEST -k "sigmoid"
    displayName: 'TensorFlow 2 Layer Tests - Legacy FE'

  - script: |
      python3 -m pip install -r $(LAYER_TESTS_DIR)/requirements.txt
      export PYTHONPATH=$(REPO_DIR)/tools/mo/:$(LAYER_TESTS_DIR):$PYTHONPATH
      export TEST_DEVICE=CPU
      $(RUN_PREFIX) python3 -m pytest $(LAYER_TESTS_DIR)/tensorflow_lite_tests/ --junitxml=$(INSTALL_TEST_DIR)/TEST-tfl_fe.xmlTEST
    displayName: 'TensorFlow Lite Layer Tests - TFL FE'

  - script: |
      python3 -m pip install -r $(LAYER_TESTS_DIR)/requirements.txt
      export PYTHONPATH=$(LAYER_TESTS_DIR):$PYTHONPATH
      export TEST_DEVICE=CPU
      $(RUN_PREFIX) python3 -m pytest $(LAYER_TESTS_DIR)/mo_python_api_tests/  --junitxml=./TEST-test_mo_convert.xmlTEST
    displayName: 'MO Python API Tests'


  - script: |
      python3 -m pip install -r $(LAYER_TESTS_DIR)/requirements.txt
      $(RUN_PREFIX) python3 -m pytest $(LAYER_TESTS_DIR)/py_frontend_tests --junitxml=./TEST-test_py_fontend.xml
    displayName: 'Python Frontend tests'

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: '**/TEST-*.xml'
      #searchFolder: '$(BUILD_DIR)'
      mergeTestResults: false # Optional
      #failTaskOnFailedTests: false # Optional
      #testRunTitle: 'Pre/Post-Commit' # Optional
      buildPlatform: 'x64' # Optional
      buildConfiguration: 'Linux' # Optional
      #publishRunAttachments: true # Optional
