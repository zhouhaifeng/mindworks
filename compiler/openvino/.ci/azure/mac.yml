trigger:
  branches:
    include:
    - master
    - 'releases/*'
  paths:
    exclude:
    - '*/docs/*'
    - 'docs/*'
    - '*/*.md'
    - '*.md'
    - '*/layer_tests_summary/*'
    - '*/conformance/*'
    - 'tests/layer_tests/*'

pr:
  drafts: 'false'
  branches:
    include:
    - 'master'
    - 'releases/*'
  paths:
    exclude:
    - '*/docs/*'
    - 'docs/*'
    - '*/*.md'
    - '*.md'
    - '*/layer_tests_summary/*'
    - '*/conformance/*'
    - 'tests/layer_tests/*'

resources:
  repositories:
  - repository: openvino_contrib
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/openvino_contrib
    ref: master

  - repository: testdata
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/testdata
    ref: master

variables:
  - group: github

jobs:
- job: Mac
  # About 250% of total time (perfomace of Mac hosts is unstable, 360 is max)
  timeoutInMinutes: '360'

  pool:
    vmImage: 'macOS-11'

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    REPO_DIR: $(Build.Repository.LocalPath)
    OPENVINO_CONTRIB_REPO_DIR: $(REPO_DIR)/../openvino_contrib
    MODELS_PATH: $(REPO_DIR)/../testdata
    WORK_DIR: $(Pipeline.Workspace)/_w
    BUILD_DIR: $(WORK_DIR)/build
    INSTALL_DIR: $(WORK_DIR)/install_pkg
    INSTALL_TEST_DIR: $(INSTALL_DIR)/tests
    SETUPVARS: $(INSTALL_DIR)/setupvars.sh
    TMP_DIR: /tmp
    CCACHE_DIR: $(WORK_DIR)/ccache/mac

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.11.2'
      addToPath: true
      architecture: 'x64'
      githubToken: $(auth_token)
    displayName: Setup Python 3.11
    name: setupPython

  - script: |
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      xcrun --sdk macosx --show-sdk-version
      env
      sysctl -a
    displayName: 'System info'

  - script: |
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      rm -rf $(BUILD_DIR) ; mkdir $(BUILD_DIR)
    displayName: 'Make dir'

  - checkout: self
    clean: 'true'
    submodules: 'true'
    path: openvino

  - checkout: openvino_contrib
    clean: 'true'
    submodules: 'true'
    path: openvino_contrib

  - checkout: testdata
    clean: 'true'
    lfs: 'true'
    path: testdata

  - script: |
      brew install cython
      brew install automake
      python3 -m pip install -r $(REPO_DIR)/src/frontends/onnx/tests/requirements.txt
      # Speed up build
      brew install ninja ccache
    displayName: 'Install dependencies'

  - script: |
      export PATH="/usr/local/opt/cython/bin:$PATH"
      cmake \
        -G Ninja \
        -DENABLE_CPPLINT=OFF \
        -DCMAKE_VERBOSE_MAKEFILE=ON \
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \
        -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
        -DENABLE_PYTHON=ON \
        -DENABLE_STRICT_DEPENDENCIES=OFF \
        -DOPENVINO_EXTRA_MODULES=$(OPENVINO_CONTRIB_REPO_DIR)/modules \
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
        -DCMAKE_C_COMPILER_LAUNCHER=ccache \
        -DBUILD_nvidia_plugin=OFF \
        -S $(REPO_DIR) \
        -B $(BUILD_DIR)
    displayName: 'CMake OpenVINO'

  - script: ls -alR $(REPO_DIR)/temp/
    displayName: 'List temp SDKs'

  - task: Cache@2
    inputs:
      key: 'ccache | "$(Agent.OS)"'
      path: $(CCACHE_DIR)
      restoreKeys: |
        ccache | "$(Agent.OS)"
    displayName: Cache
    enabled: 'false'

  - script: ccache --zero-stats --max-size=10G --show-config
    displayName: 'Clean ccache stats'

  - script: cmake --build $(BUILD_DIR) --parallel --config $(BUILD_TYPE)
    env:
      CCACHE_DIR: $(CCACHE_DIR)
      CCACHE_TEMPDIR: $(TMP_DIR)/ccache
      CCACHE_BASEDIR: $(Pipeline.Workspace)
      CCACHE_MAXSIZE: 10G
    displayName: 'Build Mac'

  - script: ccache --show-stats
    displayName: 'Show ccache stats'

  - script: ls -alR $(REPO_DIR)/bin/
    displayName: 'List bin files'

  - script: cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_DIR)/cmake_install.cmake
    displayName: 'Install'

  - script: ls -alR $(INSTALL_DIR)
    displayName: 'List install files'

  - script: cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DCOMPONENT=tests -P $(BUILD_DIR)/cmake_install.cmake
    displayName: 'Install tests'

  - script: ls -alR $(INSTALL_DIR)
    displayName: 'List install files'

  - script: . $(SETUPVARS) && $(INSTALL_TEST_DIR)/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-OVCoreUT.xml
    displayName: 'OV Core UT'
    enabled: 'false'

  - script: . $(SETUPVARS) && $(INSTALL_TEST_DIR)/ov_proxy_plugin_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-OVProxyTests.xml
    displayName: 'OV Proxy Plugin Tests'
    enabled: 'false'

  - script: . $(SETUPVARS) && $(INSTALL_TEST_DIR)/ov_ir_frontend_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-IRFrontend.xml
    displayName: 'IR Frontend Tests'
    enabled: 'false'

  - script: . $(SETUPVARS) && $(INSTALL_TEST_DIR)/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU*--gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ONNXFrontend.xml
    displayName: 'ONNX Frontend Tests'
    enabled: 'false'

  - script: . $(SETUPVARS) && $(INSTALL_TEST_DIR)/ov_cpu_unit_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_cpu_unit_tests.xml
    displayName: 'Intel CPU Unit Tests'
    enabled: 'false'

  - script: . $(SETUPVARS) && $(INSTALL_TEST_DIR)/ov_auto_unit_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_auto_unit_tests.xml
    displayName: 'AUTO UT'
    enabled: 'false'

  - script: . $(SETUPVARS) && $(INSTALL_TEST_DIR)/ov_cpu_func_tests --gtest_filter=*smoke* --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_cpu_func_tests.xml
    displayName: 'CPU FuncTests'
    enabled: 'false'

  - script: |
      . $(SETUPVARS) && $(INSTALL_TEST_DIR)/InferenceEngineCAPITests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-InferenceEngineCAPITests.xml
    env:
      DATA_PATH: $(MODELS_PATH)
      MODELS_PATH: $(MODELS_PATH)
    displayName: 'IE CAPITests'
    enabled: 'false'

  - script: |
      . $(SETUPVARS) && $(INSTALL_TEST_DIR)/ov_capi_test --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_capi_test.xml
    env:
      DATA_PATH: $(MODELS_PATH)
      MODELS_PATH: $(MODELS_PATH)
    displayName: 'IE CAPITests'
    enabled: 'false'

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: '**/TEST-*.xml'
      #searchFolder: '$(BUILD_DIR)'
      mergeTestResults: false # Optional
      #failTaskOnFailedTests: false # Optional
      #testRunTitle: 'Pre/Post-Commit' # Optional
      buildPlatform: 'x64' # Optional
      buildConfiguration: 'Mac' # Optional
      #publishRunAttachments: true # Optional
