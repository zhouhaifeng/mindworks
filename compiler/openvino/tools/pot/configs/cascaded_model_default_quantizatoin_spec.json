{
    /* Model parameters */

    "model": {
        "model_name": "model_name", // Model name (name of whole cascade)

        /* List of models in cascade */
        "cascade": [
            {
                /* The first model of cascade */
                "name": "<FIRST_MODEL_NAME>", // Name of the first model of cascade (should be taken from engine section)
                "model": "<MODEL_PATH>", // Path to the first model (.xml format)
                "weights": "<PATH_TO_WEIGHTS>" // Path to the first model weights (.bin format)
            },

            /* ... */

            {
                /* The last model of cascade */
                "name": "<LAST_MODEL_NAME>", // Name of the last model of cascade (should be taken from engine section)
                "model": "<MODEL_PATH>", // Path to the last model (.xml format)
                "weights": "<PATH_TO_WEIGHTS>" // Path to the last model weights (.bin format)
            }
        ]
    },

    /* Parameters of the engine used for model inference */

    // Post-Training Optimization Tool supports engine based on accuracy checker and custom engine.
    // For custom engine you should specify your own set of parameters.
    // The engine based on accuracy checker uses accuracy checker parameters.
    // You can specify the parameters via accuracy checker config file or directly in engine section.
    // More information about accuracy checker parameters can be found here:
    // https://github.com/opencv/open_model_zoo/tree/master/tools/accuracy_checker

    "engine": {
        /* Accuracy checker mode (default) */

        "config": "<CONFIG_PATH>",

        /* OR */

        "module": "<EVALUATOR_CORRESPONDING_TO_CURRENT_CASCADE>",
        "module_config": {
            "network_info": {
                "<FIRST_MODEL_NAME>": { // Name of the first model of cascade (this name should be used in model section)
                    "outputs": {
                        "probability_out": "prob1",
                        "region_out": "conv4-2"
                    },
                    "inputs": [
                        {
                            "name": "data",
                            "type": "INPUT",
                            "layout": "NCWH"
                        }
                    ],
                    "preprocessing": [
                        {
                            "type": "bgr_to_rgb"
                        },
                        {
                            "type": "pyramid",
                            "min_size": 10,
                            "factor": 0.79
                        }
                    ]
                },

                /* ... */

                "<LAST_MODEL_NAME>": { // Name of the last model of cascade (this name should be used in model section)
                    "outputs": {
                        "probability_out": "prob1",
                        "region_out": "conv6-2"
                    },
                    "inputs": [
                        {
                            "name": "data",
                            "type": "INPUT",
                            "layout": "NCWH"
                        }
                    ],
                    "preprocessing": [
                        {
                            "type": "bgr_to_rgb"
                        }
                    ]
                }
            },
            "launchers": [
                {
                    "framework": "dlsdk"
                }
            ],
            "datasets": [
                {
                    "name": "<DATASET_NAME>",
                    "data_source": "<DATASET_PATH>",
                    "postprocessing": [
                        {
                            "type": "filter",
                            "apply_to": "prediction",
                            "is_empty": true
                        },
                        {
                            "type": "filter",
                            "height_range": 60,
                            "apply_to": "annotation"
                        }
                    ],
                    "metrics": [
                        {
                            "type": "map",
                            "ignore_difficult": true,
                            "include_boundaries": true,
                            "allow_multiple_matches_per_ignored": true,
                            "distinct_conf": false
                        }
                    ]
                }
            ]
        }
    },

    /* Optimization hyperparameters */

    "compression": {
        "target_device": "ANY", // Target device, the specificity of which will be taken
                                // into account during optimization
        "algorithms": [
            {
                "name": "DefaultQuantization", // Optimization algorithm name
                "params": {
                    "ignored": {
                        /* Ignored block for the first model of cascade */
                        "<FIRST_MODEL_NAME>": {
                            // List of nodes that are excluded from optimization
                            "scope": [
                                "<NODE_NAME>"
                            ],
                            // List of types that are excluded from optimization
                            "operations": [
                                {
                                    "type": "<NODE_TYPE>",
                                    // Includes excluding by attributes
                                    "attributes": {
                                        "<NAME>": "<VALUE>" // Lists of values is not included
                                    }
                                },
                                {
                                    "type": "<NODE_TYPE>" // Excluding only by type
                                }
                            ]
                        },

                        /* ... */

                        /* Ignored block for the last model of cascade */
                        "<LAST_MODEL_NAME>": {
                            // List of nodes that are excluded from optimization
                            "scope": [
                                "<NODE_NAME>"
                            ],
                            // List of types that are excluded from optimization
                            "operations": [
                                {
                                    "type": "<NODE_TYPE>",
                                    // Includes excluding by attributes
                                    "attributes": {
                                        "<NAME>": "<VALUE>" // Lists of values is not included
                                    }
                                },
                                {
                                    "type": "<NODE_TYPE>" // Excluding only by type
                                }
                            ]
                        }
                    },

                    "preset": "accuracy", // A preset is a collection of optimization algorithm parameters
                                          // that will specify to the algorithm to improve which metric
                                          // the algorithm needs to concentrate. Each optimization algorithm
                                          // supports [performance, mixed, accuracy] presets

                    "stat_subset_size": 100, // Size of subset to calculate activations statistics that can be used
                                             // for quantization parameters calculation

                    /* Manually specification quantization parametrs */

                    /* Quantization parameters for weights */

                    "weights": {
                        "bits": 8, // Number of quantization bits
                        "mode": "symmetric", // Quantization mode
                        "granularity": "perchannel", // Granularity: a scale for each output channel
                        "level_low": -127, // Low quantization level
                        "level_high": 127, // High quantization level

                        /* Parameters specify how to calculate the minimum and maximum of quantization range */

                        "range_estimator": {
                            "max": {
                                "type": "quantile",
                                "outlier_prob": 0.0001
                            }
                        }
                    },

                    /* Quantization parameters for activations */

                    "activations": {
                        "bits": 8, // Number of quantization bits
                        "mode": "asymmetric", // Quantization mode
                        "granularity": "pertensor", // Granularity: one scale for output tensor

                        /* Parameters specify how to calculate the minimum and maximum of quantization range */

                        "range_estimator": {
                            "preset": "quantile",

                            /* OR */

                            /* Minimum of quantization range */

                            "min": {
                                "clipping_value": 0, // Threshold for min statistic value clipping (lower bound)
                                "aggregator": "mean", // Batch aggregation type [mean, max, min, median,
                                                      // mean_no_outliers, median_no_outliers, hl_estimator]

                                "type": "quantile", // Estimator type [min, max, abs_max, quantile, abs_quantile]
                                "outlier_prob": 0.0001 // Outlier probability: estimator consider samples which
                            },

                            /* Maximum of quantization range */

                            "max": {
                                "clipping_value": 6, // Threshold for max statistic value clipping (upper bound)
                                "aggregator": "mean", // Batch aggregation type [mean, max, min, median,
                                                      // mean_no_outliers, median_no_outliers, hl_estimator]

                                "type": "quantile", // Estimator type [min, max, abs_max, quantile, abs_quantile]
                                "outlier_prob": 0.0001 // Outlier probability: estimator consider samples which
                            }
                        }
                    }
                }
            }
        ]
    }
}
